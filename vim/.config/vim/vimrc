" Plugins {{{

filetype off
filetype plugin indent off

let s:hook = 'source' . expand('~/.config/vim/plugins/')

set runtimepath+=~/.vim/dein/repos/github.com/Shougo/dein.vim
if dein#load_state(expand('~/.vim/dein'))
    call dein#begin(expand('~/.vim/dein'))

    " GENERAL
    call dein#add('Shougo/vimproc.vim',                  { 'build': 'make' })

    " COMPLETION
    call dein#add('ervandew/supertab')
    call dein#add('roxma/nvim-completion-manager')
    if !has('nvim')
        call dein#add('roxma/vim-hug-neovim-rpc')
    endif
    " if has('nvim')
    "     call dein#add('Shougo/deoplete.nvim',            { 'hook_post_source': s:hook . 'deoplete.vim'})
    " else
    "     call dein#add('Shougo/neocomplete.vim',          { 'hook_post_source': s:hook . 'neocomplete.vim' })
    " endif
    call dein#add('Shougo/echodoc.vim')
    call dein#add('Shougo/neosnippet.vim')
    call dein#add('Shougo/neosnippet-snippets')

    " LANGUAGE
    if has('nvim')
        call dein#add('https://github.com/w0rp/ale')
        call dein#add('autozimu/LanguageClient-neovim',  { 'hook_post_source': s:hook . 'languageclient-neovim.vim' })
    endif
    call dein#add('Shougo/neco-vim',                     { 'on_ft': 'vim' })
    call dein#add('StanAngeloff/php.vim',                { 'on_ft': 'php', 'hook_post_source': s:hook . 'php.vim' })
    call dein#add('fatih/vim-go',                        { 'on_ft': 'go', 'hook_post_source': s:hook . 'vim-go.vim' })
    if has('nvim')
        call dein#add('zchee/deoplete-go',               { 'on_ft': 'go', 'build': 'make' })
        call dein#add('jodosha/vim-godebug',             { 'on_ft': 'go' })
    endif
    call dein#add('jelera/vim-javascript-syntax',        { 'on_ft': 'javascript' })
    call dein#add('rhysd/vim-clang-format',              { 'on_ft': 'cpp' })
    if has('nvim')
        call dein#add('tweekmonster/deoplete-clang2',    { 'on_ft': 'cpp' })
    else
        call dein#add('Rip-Rip/clang_complete',          { 'on_ft': 'cpp', 'build': 'make install' })
    endif
    call dein#add('groenewege/vim-less',                 { 'on_ft': 'less' })

    " NAVIGATION
    call dein#add('airblade/vim-rooter')
    call dein#add('scrooloose/nerdtree',                 { 'hook_post_source': s:hook . 'nerdtree.vim' })
    call dein#add('majutsushi/tagbar')
    call dein#add('junegunn/fzf',                        { 'rtp': '~/.fzf', 'build': './install --all --no-update-rc', 'merged': 0 })
    call dein#add('junegunn/fzf.vim',                    { 'hook_post_source': s:hook . 'fzf.vim' })
    if has('nvim') || v:version >= 800
        call dein#add('Shougo/denite.nvim',              { 'hook_post_source': s:hook . 'denite.vim' })
    else
        call dein#add('Shougo/unite.vim')
    endif

    " LOOKS
    call dein#add('altercation/vim-colors-solarized')
    call dein#add('vim-airline/vim-airline',             { 'hook_post_source': s:hook . 'airline.vim' })
    call dein#add('vim-airline/vim-airline-themes')
    call dein#add('Yggdroot/indentLine')
    call dein#add('valloric/MatchTagAlways')

    " GIT
    call dein#add('airblade/vim-gitgutter')
    call dein#add('tpope/vim-fugitive',                  { 'hook_post_source': s:hook . 'vim-fugitive.vim' })

    " UTILS
    call dein#add('tpope/vim-surround')
    call dein#add('tpope/vim-commentary')
    call dein#add('tpope/vim-repeat')
    call dein#add('junegunn/vim-easy-align')
    call dein#add('justinmk/vim-sneak')

    " MISC
    call dein#add('benizi/vim-automkdir')
    if has('nvim')
        call dein#add('tweekmonster/nvimdev.nvim')
    endif

    call dein#end()
    call dein#save_state()
endif

" Ale
let g:airline#extensions#ale#enabled = 1
nmap ]a <Plug>(ale_previous_wrap)
nmap [a <Plug>(ale_next_wrap)

" Neosnippet
let g:neosnippet#snippets_directory='~/.config/vim/snippets/'

imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)

" EasyAlign
vmap <leader>a <Plug>(EasyAlign)

" GitGutter
let g:gitgutter_map_keys = 0
nmap ]h <Plug>GitGutterNextHunk
nmap [h <Plug>GitGutterPrevHunk

" vim-rooter
let g:rooter_silent_chdir=1

" godebug
if has('nvim')
    augroup godebug
        au FileType go nmap <leader>dd <Plug>(godebug-debug)
        au FileType go nmap <leader>db <Plug>(godebug-togglebreakpoint)
    augroup end
endif

" indentLine
let g:indentLine_char = 'â”†'

" }}}
" Settings {{{

filetype plugin indent on
syntax enable

if has('nvim')
    set inccommand=split
endif

" search
set ignorecase

" wildmenu
set completeopt="menuone,noinsert"

set wildignore+=*/.git/**/*
set wildignore+=tags
set wildignorecase

" colors
set t_Co=256
set background=dark
colorscheme solarized

set mouse=a

" statusline
set laststatus=2

" show line number
set number

set scrolloff=2
set matchtime=4

" set cursorline

" buffers
set hidden

" tab/space
set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4

" indentation
set autoindent
set smartindent
set cindent
set textwidth=80

" undo/backup
set noswapfile
set undodir=~/.vim/tmp/undo//
set undofile
set backupdir=~/.vim/tmp/backup//
set backup

" }}}
" Mappings {{{

" map Leader key to Space
let g:mapleader = "\<space>"

nnoremap Y y$
" nnoremap V v$
" nnoremap vv 0v$ " needs fixing

" opposite to <S-j>
nnoremap <S-k> i<CR><ESC>

nnoremap <leader>r :so ~/.vimrc <CR>
nnoremap <leader>vo :tabnew ~/.config/vim/vimrc<CR>
nnoremap <leader>so :source %<CR>

" toggle options
nnoremap <leader>ts :set hlsearch!<CR>
nnoremap <leader>tc :set cursorline!<CR>
nnoremap <leader>to :call AutoHighlightToggle()<CR>

" search
nnoremap <ESC> :noh<CR>

" faster movement
nnoremap <M-h> ^
nnoremap <M-j> 5j
nnoremap <M-k> 5k
nnoremap <M-l> $

vnoremap <M-h> ^
vnoremap <M-j> 5j
vnoremap <M-k> 5k
vnoremap <M-l> $

" buffer navigation
nnoremap <silent><leader>l :bnext<CR>
nnoremap <silent><leader>h :bprev<CR>
nnoremap <silent><leader>c :b #\|bd #<CR>

" window navigation
nnoremap <C-h> :wincmd h<CR>
nnoremap <C-j> :wincmd j<CR>
nnoremap <C-k> :wincmd k<CR>
nnoremap <C-l> :wincmd l<CR>

" window resizing
map <C-s>h :vertical resize -1<CR>
map <C-s>j :resize +1<CR>
map <C-s>k :resize -1<CR>
map <C-s>l :vertical resize +1<CR>

" }}}
" Functions {{{

function! ClearPluginCache() abort
    :! rm -rf ~/.vim/dein/.cache/
    call dein#update()
endfunction


let g:auto_highlight_active = 0
let g:auto_highlight_delay = 600
let g:auto_highlight_style ='guifg=NONE guibg=NONE gui=underline ctermfg=NONE ctermbg=NONE cterm=underline'
exe 'highlight WordOccurence ' . g:auto_highlight_style

function! AutoHighlightToggle() abort
    if g:auto_highlight_active
        let g:auto_highlight_active=0
        call AutoHighlightDisable()
    else
        let g:auto_highlight_active=1
        call AutoHighlightEnable()
    endif
endfunction

function! AutoHighlightEnable() abort
    augroup auto_highlight
        au CursorHold * call HighlightOccurences()
    augroup end
    exe 'setl updatetime=' . g:auto_highlight_delay
endfunction

function! AutoHighlightDisable() abort
    call clearmatches()
    au! auto_highlight
    augroup! auto_highlight
    setl updatetime=4000
endfunction

function! HighlightOccurences() abort
    call clearmatches()
    let l:match_word = '\V\<' . escape(expand('<cword>'), '\') . '\>'
    call matchadd('WordOccurence', l:match_word, 0)
endfunction

" }}}

call dein#call_hook('post_source')

" vim:fdm=marker
