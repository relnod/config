" PLUGINS {{{

set nocompatible

filetype off
filetype plugin indent off

set runtimepath+=~/.vim/dein/repos/github.com/Shougo/dein.vim
if dein#load_state(expand('~/.vim/dein'))
    call dein#begin(expand('~/.vim/dein'))

    if !has('nvim') || v:version < 800
        call dein#add('Shougo/unite.vim')
    else
        call dein#add('Shougo/denite.nvim')
    endif

    if !has('nvim')
        call dein#add('Shougo/vimshell.vim')
    endif

    call dein#add('Shougo/vimproc.vim', { 'build': 'make' })

    " COMPLETION
    call dein#add('ervandew/supertab')
    if has('nvim')
        call dein#add('Shougo/deoplete.nvim',         { 'hook_add': 'source ~/.config/vim/plugins/deoplete.vim'})
    else
        call dein#add('Shougo/neocomplete.vim',       { 'hook_add': 'source ~/.config/vim/plugins/neocomplete.vim' })
    endif
    call dein#add('Shougo/echodoc.vim')

    " LANGUAGE
    call dein#add('autozimu/LanguageClient-neovim',   { 'hook_add': 'source ~/.config/vim/plugins/languageclient-neovim.vim' })
    call dein#add('Shougo/neco-vim',                  { 'on_ft': 'vim' })
    call dein#add('StanAngeloff/php.vim',             { 'on_ft': 'php' })
    call dein#add('roxma/LanguageServer-php-neovim',  { 'on_ft': 'php', 'build': 'composer install && composer run-script parse-stubs' })
    call dein#add('fatih/vim-go',                     { 'on_ft': 'go', 'hook_add': 'source ~/.config/vim/plugins/vim-go.vim' })
    call dein#add('zchee/deoplete-go',                { 'on_ft': 'go', 'build': 'make' })
    call dein#add('jodosha/vim-godebug',              { 'on_ft': 'go' })
    call dein#add('jelera/vim-javascript-syntax',     { 'on_ft': 'javascript' })
    call dein#add('rhysd/vim-clang-format',           { 'on_ft': 'cpp' })
    if has('nvim')
        call dein#add('tweekmonster/deoplete-clang2', { 'on_ft': 'cpp' })
    else
        call dein#add('Rip-Rip/clang_complete',       { 'on_ft': 'cpp', 'build': 'make install' })
    endif

    " NAVIGATION
    call dein#add('airblade/vim-rooter')
    call dein#add('scrooloose/nerdtree',              { 'hook_add': 'source ~/.config/vim/plugins/nerdtree.vim' })
    call dein#add('majutsushi/tagbar')
    call dein#add('junegunn/fzf',                     { 'rtp': '~/.fzf', 'build': './install --all', 'merged': 0 })
    call dein#add('junegunn/fzf.vim',                 { 'hook_add': 'source ~/.config/vim/plugins/fzf.vim' })

    " LOOKS
    call dein#add('altercation/vim-colors-solarized')
    call dein#add('vim-airline/vim-airline',          { 'hook_add': 'source ~/.config/vim/plugins/airline.vim' })
    call dein#add('vim-airline/vim-airline-themes')
    call dein#add('Yggdroot/indentLine')
    call dein#add('valloric/MatchTagAlways')

    " GIT
    call dein#add('airblade/vim-gitgutter')
    call dein#add('tpope/vim-fugitive',               { 'hook_add': 'source ~/.config/vim/plugins/vim-fugitive.vim' })

    " UTILS
    call dein#add('tpope/vim-surround')
    call dein#add('tpope/vim-commentary')
    call dein#add('tpope/vim-repeat')
    call dein#add('junegunn/vim-easy-align')

    " MISC
    call dein#add('benizi/vim-automkdir')

    call dein#end()
    call dein#save_state()

endif
if !has('vim_starting') && dein#check_install()
    call dein#install()
endif

filetype plugin indent on

xmap <leader>a <Plug>(EasyAlign)
nmap <leader>a <Plug>(EasyAlign)

" GitGutter {{{
let g:gitgutter_map_keys = 0
" }}}
" Rooter {{{
let g:rooter_silent_chdir=1
" }}}
" vim-godebug {{{
au FileType go nmap <leader>dd <Plug>(godebug-debug)
au FileType go nmap <leader>db <Plug>(godebug-togglebreakpoint)
" }}}
" }}}
" Settings {{{

set hidden

" Use 256 colours
set t_Co=256

" only redraw when needed
set lazyredraw

set background=dark
colorscheme solarized

set guifont=Hack:h9
set mouse=a

" Always show statusline
set laststatus=2

" show line number
set number

set cursorline
highlight CursorLine ctermbg=LightBlue

" enable syntax highting
syntax on

" tabs
set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4

" indentation
set autoindent
set smartindent
set cindent
set textwidth=80

" undo/backup
set noswapfile
set undodir=~/.vim/tmp/undo//
set undofile
set backupdir=~/.vim/tmp/backup//
set backup

" }}}
" Mappings {{{

" Map Leader Key to Space
let mapleader = "\<space>"

nnoremap Y y$
" nnoremap V v$
" nnoremap vv 0v$

nnoremap <leader>vr :so ~/.vimrc <CR>
nnoremap <leader>vo :e  ~/.dotfiles/vim/.config/vim/vimrc<CR>

" Toggle Highlight Search
noremap <leader>st :set invhlsearch<CR> " TODO: remap

nnoremap <leader>w :w<CR>

nnoremap <S-h> ^
"nnoremap <S-J>5j<CR>
"vnoremap <S-k>5k<CR>
nnoremap <S-l> $

" buffers
noremap <silent><leader>l :bnext<CR>
noremap <silent><leader>h :bprev<CR>
noremap <silent><leader>q :bdelete<CR>

" windows
nnoremap <C-h> :wincmd h<CR>
nnoremap <C-j> :wincmd j<CR>
nnoremap <C-k> :wincmd k<CR>
nnoremap <C-l> :wincmd l<CR>

" tabs
nnoremap <leader>tl :tabnext<CR>
nnoremap <leader>th :tabprevious<CR>
nnoremap <leader>to :tabedit<CR>
nnoremap <leader>tq :tabclose<CR>

" }}}
" Functions {{{
function! ClearPluginCache()
    :! rm -rf ~/.vim/dein/.cache/
    call dein#update()
endfunction
" }}}

" vim:fdm=marker
